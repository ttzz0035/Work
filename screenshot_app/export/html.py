# export/html.py
from __future__ import annotations
from pathlib import Path
from html import escape
import re, logging, base64

from .base import BaseExporter, ExportOptions, DEFAULT_TITLE
from .registry import register
from core.model import ExportBundle

log = logging.getLogger("export.html")


@register
class HtmlExporter(BaseExporter):
    """HTMLエクスポータ：画像はBase64 Data URIで埋め込み（JS不要タブ）"""
    name = "html"
    ext = ".html"

    SIGNATURE = "<!-- CAPTURE_TABS_v2_RADIO -->"
    A_INPUTS  = "<!-- TABS_INPUTS -->"
    A_LABELS  = "<!-- TABS_LABELS -->"
    A_PANELS  = "<!-- TABS_PANELS -->"

    TEMPLATE = """<!doctype html>
<html lang="ja">
<head>
<meta charset="utf-8">
<title>{doc_title}</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
{signature}
<style>
.tabs{ max-width:1080px; margin:16px auto; display:grid; grid-template-rows:auto auto 1fr; gap:8px; }
.tabs input[type="radio"]{ position:absolute; opacity:0; pointer-events:none; }
.tab-labels{ display:flex; flex-wrap:wrap; gap:8px; }
.tab-labels label{ display:inline-block; padding:6px 12px; border:1px solid #ccc; border-bottom:none; border-radius:8px 8px 0 0; background:#f7f7f7; cursor:pointer; user-select:none; }
.tab-panels > section{ display:none; border:1px solid #ccc; border-radius:0 8px 8px 8px; padding:12px; margin-top:-1px; }
.grid{ display:flex; flex-direction:column; gap:16px; max-width:980px; }
.card{ border:1px solid #ddd; border-radius:8px; overflow:hidden; box-shadow:0 1px 2px rgba(0,0,0,.06) }
.card header{ padding:8px 12px; background:#fafafa; border-bottom:1px solid #eee }
.card .body{ display:flex; gap:12px; align-items:flex-start; padding:12px }
.card img{ max-width:600px; height:auto; display:block }
.card .meta{ flex:1; min-width:240px }
.card .meta pre{ white-space:pre-wrap; background:#f7f7f7; border:1px solid #eee; padding:8px; border-radius:6px }
.note{ color:#666; font-size:12px; margin:12px 0; }
</style>
<style id="tab-links"></style>
</head>
<body>
<div class="tabs">
  <!-- TABS_INPUTS -->
  <div class="tab-labels">
    <!-- TABS_LABELS -->
  </div>
  <div class="tab-panels">
    <!-- TABS_PANELS -->
  </div>
</div>
<div class="note">Generated by Capture Export • Source: {folder_path}</div>
</body>
</html>
"""

    # --- Public API ---
    def export_bundle(self, bundle: ExportBundle, options: ExportOptions) -> Path:
        tab_title = (options.title or bundle.title or DEFAULT_TITLE).strip()
        out = options.filename or (bundle.folder / f"captures_export{self.ext}")
        out.parent.mkdir(parents=True, exist_ok=True)

        content = self._cards_html(bundle)  # ← 画像はData URIで埋め込み

        if out.exists():
            html = out.read_text(encoding="utf-8")
            if self._has_template(html):
                html = self._remove_tab(html, tab_title)
                html = self._append_tab(html, tab_title, content, check_first=False)
                out.write_text(html, encoding="utf-8")
                return out

        html_new = (
            self.TEMPLATE
            .replace("{doc_title}", escape(tab_title))
            .replace("{folder_path}", escape(str(bundle.folder)))
            .replace("{signature}", self.SIGNATURE)
        )
        html_new = self._append_tab(html_new, tab_title, content, check_first=True)
        out.write_text(html_new, encoding="utf-8")
        return out

    # --- Private helpers ---
    def _resolve_title(self, item) -> str:
        meta = getattr(item, "meta_raw", {}) or {}
        if meta.get("display_title"): return str(meta["display_title"])
        img = meta.get("image_path")
        if img:
            try: return Path(img).stem
            except Exception: pass
        return str(getattr(item, "title", ""))

    def _img_data_uri(self, png_path: Path) -> str:
        # 画像を読み込んで data URI化（png固定だが必要なら拡張可）
        b = png_path.read_bytes()
        return "data:image/png;base64," + base64.b64encode(b).decode("ascii")

    def _cards_html(self, bundle: ExportBundle) -> str:
        parts = []
        for it in bundle.items:
            title = self._resolve_title(it)
            out_png = it.render_with_annos(bundle.folder)  # 生成された注釈込みPNG（ファイル）
            data_uri = self._img_data_uri(out_png)         # ← データ埋め込みに変換
            parts.append(
                f'<div class="card">'
                f'  <header>{escape(title)}</header>'
                f'  <div class="body">'
                f'    <img src="{data_uri}" alt="{escape(title)}" />'
                f'    <div class="meta"><pre>{escape(it.comment) if it.comment else "(no comment)"}'
                f'</pre></div></div></div>'
            )
        if not parts:
            return ('<div class="card"><header>No items</header>'
                    '<div class="body"><div class="meta"><pre>(no json/png)</pre></div></div></div>')
        return '<div class="grid">' + "\n".join(parts) + '</div>'

    def _has_template(self, html: str) -> bool:
        return (self.SIGNATURE in html and self.A_INPUTS in html and
                self.A_LABELS in html and self.A_PANELS in html)

    def _next_index(self, html: str) -> int:
        import re as _re
        nums = [int(x) for x in _re.findall(r'id="t(\d+)"', html)]
        return (max(nums) + 1) if nums else 1

    def _remove_tab(self, html: str, title: str) -> str:
        import re as _re
        t = _re.escape(escape(title))
        html = _re.sub(rf'\s*<input\b[^>]*\bdata-title="{t}"[^>]*>\s*', '', html, flags=_re.S | _re.I)
        html = _re.sub(rf'\s*<label\b[^>]*\bdata-title="{t}"[^>]*>.*?</label>\s*', '', html, flags=_re.S | _re.I)
        html = _re.sub(rf'\s*<section\b[^>]*\bdata-title="{t}"[^>]*>.*?</section>\s*', '', html, flags=_re.S | _re.I)
        return html

    def _append_tab(self, html: str, tab_title: str, content_html: str, check_first: bool) -> str:
        import re as _re
        if not self._has_template(html):
            return html
        idx = self._next_index(html)
        t = escape(tab_title)
        checked = ''
        if check_first and not _re.search(r'<input\b[^>]*\btype="radio"[^>]*\bchecked\b', html, flags=_re.I):
            checked = ' checked'
        in_html  = f'<input type="radio" name="tabs" id="t{idx}" data-title="{t}"{checked}>'
        lb_html  = f'<label for="t{idx}" data-title="{t}">{t}</label>'
        pn_html  = f'<section id="p{idx}" data-title="{t}">{content_html}</section>'
        html = html.replace(self.A_INPUTS, in_html + "\n  " + self.A_INPUTS)
        html = html.replace(self.A_LABELS, lb_html + "\n    " + self.A_LABELS)
        html = html.replace(self.A_PANELS, pn_html + "\n    " + self.A_PANELS)
        rule_panel = f'#t{idx}:checked ~ .tab-panels #p{idx} {{ display:block; }}'
        rule_label = f'#t{idx}:checked ~ .tab-labels label[for="t{idx}"] {{ background:#e0e0e0; border-color:#bbb; }}'
        html = _re.sub(
            r'(<style id="tab-links">)(.*?)(</style>)',
            lambda m: f'{m.group(1)}\n{m.group(2)}\n{rule_panel}\n{rule_label}\n{m.group(3)}',
            html, flags=_re.S | _re.I
        )
        return html
